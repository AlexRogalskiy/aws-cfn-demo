---
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  AWS CloudFormation Sample Template DynamoDB_Table: This template demonstrates
  the creation of a DynamoDB table.  **WARNING** This template creates an Amazon
  DynamoDB table. You will be billed for the AWS resources used if you create a
  stack from this template.
Parameters:
  ReadCapacityUnits:
    Description: Provisioned read throughput
    Type: Number
    Default: 5
    MinValue: 5
    MaxValue: 10000
    ConstraintDescription: must be between 5 and 10000
  WriteCapacityUnits:
    Description: Provisioned write throughput
    Type: Number
    Default: 10
    MinValue: 5
    MaxValue: 10000
    ConstraintDescription: must be between 5 and 100000
Resources:
  EmployeeTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      AttributeDefinitions:
        - AttributeName: "EmployeeID"
          AttributeType: "S"
        - AttributeName: "EmployeeName"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "EmployeeID"
          KeyType: "HASH"
        - AttributeName: "EmployeeName"
          KeyType: "RANGE"
      ProvisionedThroughput:
        ReadCapacityUnits: !Ref ReadCapacityUnits
        WriteCapacityUnits: !Ref WriteCapacityUnits
  LambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Environment:
        Variables:
          TABLE_NAME: !Ref EmployeeTable
      Code:
        ZipFile: |
          import boto3
          import os

          table_name = os.environ['TABLE_NAME']


          def lambda_handler(event, context):
              client = boto3.resource('dynamodb')
              table = client.Table(table_name)
              print(table.table_status)
              table.put_item(Item={'EmployeeId': '1', 'Employee':  'Test Employee'})
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.7
      Timeout: 60
      MemorySize: 128
  LambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: AllowLambdaLogs
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "logs:*"
                Resource: arn:aws:logs:*:*:*
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "dynamodb:*"
                Resource: !GetAtt EmployeeTable.Arn
Outputs:
  TableName:
    Value: !Ref EmployeeTable
    Description: Table name of the newly created DynamoDB table
